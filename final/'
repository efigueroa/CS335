/* Various Functions called from main
 */

#include <GL/glfw.h>
#include <cstdlib>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include "enemy.cpp"

using namespace std;

extern float moveX;                   //player movement
extern GLuint backTexture;
const int MAXENEMY = 5;

Enemy* baddy = new Enemy[MAXENEMY];

void InitEnemies()
{
  for(int i=0;i<MAXENEMY;i++) 
  {
    usleep(500);
    float r=rand()%8000-4000;
    float x=r/1000.0;

    baddy[i].setX(x);
  }
}

void drawEnemy() {

  for(int i=0;i<MAXENEMY;i++)
  {
    glPushMatrix();
    glTranslatef(baddy[i].xPos,baddy[i].yPos,0);
    glColor3f(1,0,0); //red
    glBegin(GL_TRIANGLES);
    {
      glVertex3f(-0.5,0.5,-5.5);
      glVertex3f(-1.0, -1.5, -5.5);
      glVertex3f(-1.5,0.5,-5.5);
    }
    glEnd();
    glPopMatrix();
  }
}

void shutDown(int return_code)
{
  glfwTerminate();
  exit(return_code);
}

void drawPlayer() {

  glPushMatrix();
  glTranslatef(moveX,-4.5,0); //move left+down and draw this quad

  float e=.4,f=9;;
  glBegin(GL_QUADS);
  {
    glColor3f(0.07, 0.24, 0.67); //
    glVertex3f(-e, e, -f);
    glVertex3f(e, e, -f);
    glVertex3f(e, -e, -f);
    glVertex3f(-e, -e, -f);
  }
  glEnd();
  glPopMatrix();

}



void drawWall() {

  glPushMatrix();
  glTranslatef(0,-4,0);
  float d = 10;
  glBegin(GL_QUADS); 
  {
    glColor3f(0.15, 0.84,0 ); 
    glVertex3f(-6, 0.3, -d);
    glVertex3f(6, 0.3, -d);
    glVertex3f(6, -0.3, -d);
    glVertex3f(-6,-0.3, -d);
  }
  glEnd();
  glPopMatrix();

}



void drawEn(){

  float d = 1;
  glPushMatrix();
  glTranslatef(0,0,0);
  glColor3f(0.9f, 0.0f, 0.0f); //red
 glBegin(GL_TRIANGLES);
 {
   glColor3f(1,0,0); //red
   glVertex3f(-1, 2, -d); //left, up (top left)
   glColor3f(0,1,0); //green
   glVertex3f(-1.5,2,-d);   //right, up (top right)
   glColor3f(0,0,1); //blue
   glVertex3f(-1,1.5,-d);   //bottom
  }
  glEnd();
  glPopMatrix();
}

void render()
{
  // clear the buffer
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  glMatrixMode(GL_MODELVIEW);
  glLoadIdentity();

  /*
  //background texture
  glPushMatrix();
  glBindTexture(GL_TEXTURE_2D, backTexture);
  glBegin(GL_QUADS);
  {
    glTexCoord2f(0,0); glVertex2i(100, 500);
    glTexCoord2f(0,1); glVertex2i(100, 600);
    glTexCoord2f(1,1); glVertex2i(200, 600);
    glTexCoord2f(1,0); glVertex2i(200, 100);
  }
  glEnd();
  glPopMatrix();
*/

  //menu();
  drawPlayer();
  drawWall();
  drawEn();
  glfwSwapBuffers();
}

void GLFWCALL keyCallBack(int key, int action) 
{

  if(key == GLFW_KEY_ESC && action == GLFW_PRESS)
    shutDown(0);

  //Player movement, left and right only
  {
    if(key == 'A' && action == GLFW_PRESS) //to the left, to the left! 
    {
      printf("%f\n",moveX);
      if(moveX >= 4) 
      { //dont move it further 
      }
      else
      {
        moveX += .5;
      }
    }

    if(key == 'D' && action == GLFW_PRESS) //right movement
    {
      printf("%f\n",moveX);
      if(moveX <= -4) 
      {  
      }
      else
      {
        moveX -= .5;
      }
    }
  }
}



void init(int window_height, int window_width)
{
  //big block of glfw stuff
  if (glfwInit() != GL_TRUE)
    shutDown(1);

  if (glfwOpenWindow(window_width, window_height, 5, 6, 5, 0, 0, 0, GLFW_WINDOW) != GL_TRUE)
    shutDown(1);

  glfwSetWindowPos(900,100);


  glfwSetWindowTitle("FlatLander: Prevent the Uprising");
  glfwSetKeyCallback(keyCallBack);

  // set the projection matrix to a normal frustum with a max depth of 50
  glMatrixMode(GL_PROJECTION);
  glLoadIdentity();
  float aspect_ratio = ((float)window_height) / window_width;
  glFrustum(.5, -.5, -.5 * aspect_ratio, .5 * aspect_ratio, 1, 50);
  glMatrixMode(GL_MODELVIEW);


  glClearColor(0,0,0,1);
  glClearDepth(1);
  glClear(GL_COLOR_BUFFER_BIT);
  glClear(GL_COLOR_MATERIAL);


  glDisable(GL_LIGHTING);

  //texture loading
  glEnable(GL_TEXTURE_2D);
  glBindTexture(GL_TEXTURE_2D, 0);

  //backTexture = loadBMP("background.bmp");
  //printf("Texture %i",backTexture);

  //other inits
  InitEnemies();
}


